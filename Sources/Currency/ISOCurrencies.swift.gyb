//===----------------------------------------------------------------------===//
//
// This source file is part of the SwiftCurrency open source project
//
// Copyright (c) 2020 SwiftCurrency project authors
// Licensed under MIT License
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of SwiftCurrency project authors
//
// SPDX-License-Identifier: MIT
//
//===----------------------------------------------------------------------===//

% warning = "Contents following this line are automatically generated, and should not be edited."
// ${warning}

// MARK: -
// MARK: ISO 4217 Currencies

%{ import csv }%
% with open('../../Resources/ISO4217.csv') as file:
  % for row in csv.DictReader(file):
    %{
    alphaCode = row["Ccy"]
    numCode = row["CcyNbr"]
    name = row["CcyNm"]
    minorUnit = row["CcyMnrUnts"]
    }%
    % if alphaCode and numCode and numCode.isdigit() and name and minorUnit and minorUnit.isdigit():
      % if alphaCode == "XXX":
/// "${name}" (${alphaCode}); as defined by ISO 4217 for transactions that involve no currency.
      % else:
/// The ${name} (${alphaCode}) currency, as defined by ISO 4217.
      % end
public struct ${alphaCode}: CurrencyProtocol, CurrencyMetadata {
  public static var name: String { return "${name}" }
  public static var alphabeticCode: String { return "${alphaCode}" }
  public static var numericCode: UInt16 { return ${numCode} }
  public static var minorUnits: UInt8 { return ${minorUnit} }
  
  public var minorUnits: Int64 { return self._minorUnits }
  
  public init<T: BinaryInteger>(minorUnits: T) { self._minorUnits = .init(minorUnits) }
  
  private let _minorUnits: Int64
}

    %end
  %end
%end
